---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: poolboy deploy
  name: poolboy-deploy

parameters:
- name: NAMESPACE
  value: poolboy
- name: IMAGE
  value: quay.io/redhat-cop/poolboy:latest
  #value: docker-registry.default.svc:5000/poolboy/poolboy:latest
  #value: image-registry.openshift-image-registry.svc:5000/poolboy/poolboy:latest
- name: IMAGE_PULL_POLICY
  value: IfNotPresent
  #value: Always
- name: SERVICE_NAME
  value: poolboy
- name: OPERATOR_DOMAIN
  value: poolboy.gpte.redhat.com

objects:
- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: resourceclaims.${OPERATOR_DOMAIN}
  spec:
    group: ${OPERATOR_DOMAIN}
    version: v1
    scope: Namespaced
    names:
      plural: resourceclaims
      singular: resourceclaim
      kind: ResourceClaim
      shortNames: []
    subresources:
      status: {}

- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: resourcehandles.${OPERATOR_DOMAIN}
  spec:
    group: ${OPERATOR_DOMAIN}
    version: v1
    scope: Namespaced
    names:
      plural: resourcehandles
      singular: resourcehandle
      kind: ResourceHandle
      shortNames: []
    subresources:
      status: {}

- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: resourceproviders.${OPERATOR_DOMAIN}
  spec:
    group: ${OPERATOR_DOMAIN}
    version: v1
    scope: Namespaced
    names:
      plural: resourceproviders
      singular: resourceprovider
      kind: ResourceProvider
      shortNames: []
    subresources:
      status: {}

- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: resourcepools.${OPERATOR_DOMAIN}
  spec:
    group: ${OPERATOR_DOMAIN}
    version: v1
    scope: Namespaced
    names:
      plural: resourcepools
      singular: resourcepool
      kind: ResourcePool
      shortNames: []
    subresources:
      status: {}

- apiVersion: v1
  kind: Namespace
  metadata:
    name: ${NAMESPACE}
    annotations:
      openshift-provision/action: create

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${SERVICE_NAME}
    namespace: ${NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: ${SERVICE_NAME}-aggregate-to-admin
    labels:
      rbac.authorization.k8s.io/aggregate-to-admin: "true"
  rules:
  - apiGroups:
    - ${OPERATOR_DOMAIN}
    resources:
    - resourceclaims
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - watch
    - update

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: ${SERVICE_NAME}-aggregate-to-edit
    labels:
      rbac.authorization.k8s.io/aggregate-to-edit: "true"
  rules:
  - apiGroups:
    - ${OPERATOR_DOMAIN}
    resources:
    - resourceclaims
    verbs:
    - get
    - list
    - watch

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: ${SERVICE_NAME}
  rules:
  - apiGroups:
    - ${OPERATOR_DOMAIN}
    resources:
    - resourceproviders
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ${OPERATOR_DOMAIN}
    resources:
    - resourceclaims
    - resourceclaims/status
    - resourcehandles
    - resourcepools
    - resourcepools/status
    - resourceproviders/status
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
  - apiGroups:
    - user.openshift.io
    resources:
    - users
    - identities
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
    - update

- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: ${SERVICE_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: ${SERVICE_NAME}
  subjects:
  - kind: ServiceAccount
    name: ${SERVICE_NAME}
    namespace: ${NAMESPACE}

- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
    namespace: ${NAMESPACE}
  spec:
    ports:
    - name: metrics
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      name: ${SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      name: ${SERVICE_NAME}
    name: ${SERVICE_NAME}
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: ${SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${SERVICE_NAME}
      spec:
        containers:
        - name: manager
          env:
          - name: OPERATOR_DOMAIN
            value: ${OPERATOR_DOMAIN}
          image: ${IMAGE}
          imagePullPolicy: ${IMAGE_PULL_POLICY}
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          ports:
          - name: metrics
            containerPort: 8000
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        securityContext: {}
        serviceAccountName: ${SERVICE_NAME}
        terminationGracePeriodSeconds: 30

