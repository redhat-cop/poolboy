---
- hosts: localhost
  gather_facts: false
  vars:
    oc_cmd: oc
    operator_domain: poolboy.gpte.redhat.com
    operator_namespace: poolboy
    operator_service_name: poolboy
    operator_test_namespace: poolboy-test
    build: false
    local_test: true
    restart: "{{ build }}"
  tasks:
  - when: build | bool
    block:
    - name: Start operator build
      command: >-
        {{ oc_cmd }} start-build {{ operator_service_name }}
        -n {{ operator_namespace | quote }}
        --from-dir {{ playbook_dir }}/..

    - name: Get BuildConfig
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: BuildConfig
        name: "{{ operator_service_name }}"
        namespace: "{{ operator_namespace }}"
      register: operator_buildconfig

    - name: Wait for operator build
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: Build
        name: "{{ operator_service_name }}-{{ operator_buildconfig.resources[0].status.lastVersion }}"
        namespace: "{{ operator_namespace }}"
      register: operator_build
      until: operator_build.resources[0].status.phase in ['Complete', 'Failed']
      retries: 30
      delay: 10

    - name: Assert that exactly one deploy action for test-1 was found
      assert:
        that:
        - operator_build.resources[0].status.phase == 'Complete'
        fail_msg: Operator build did not complete
        success_msg: Operator build complete

  - when: restart | bool
    block:
    - name: Scale down operator
      command: oc scale deployment {{ operator_service_name }} -n {{ operator_namespace | quote }} --replicas=0

    - name: Wait for operator scale down
      k8s_facts:
        api_version: v1
        kind: Pod
        namespace: "{{ operator_namespace }}"
        label_selectors:
        - name={{ operator_service_name }}
      register: get_operator_pod
      until: get_operator_pod.resources | length == 0
      retries: 30
      delay: 5

  - name: Get test resource claims
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      namespace: "{{ operator_test_namespace }}"
    register: test_claims

  - name: Remove finalizer from test resource claims
    command: >-
      {{ oc_cmd }} patch resourceclaim.{{ operator_domain }} {{ claim.metadata.name }}
      -n {{ operator_test_namespace }}
      --type=merge -p {{ patch | to_json | quote}}
    loop: "{{ test_claims.resources }}"
    loop_control:
      label: "{{ claim.metadata.name }}"
      loop_var: claim
    vars:
      patch:
        metadata:
          finalizers: []

  - name: Remove test resource claims
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: "{{ claim.metadata.name }}"
      namespace: "{{ operator_test_namespace }}"
    loop: "{{ test_claims.resources }}"
    loop_control:
      label: "{{ claim.metadata.name }}"
      loop_var: claim

  - name: Get test resource handles
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceHandle
      namespace: "{{ operator_namespace }}"
      label_selectors:
      - "{{ operator_domain }}/resource-provider-name=test"
    register: test_handles

  - name: Remove finalizer from test resource handles
    command: >-
      {{ oc_cmd }} patch resourcehandle.{{ operator_domain }} {{ handle.metadata.name }}
      -n {{ operator_namespace }}
      --type=merge -p {{ patch | to_json | quote}}
    loop: "{{ test_handles.resources }}"
    loop_control:
      label: "{{ handle.metadata.name }}"
      loop_var: handle
    vars:
      patch:
        metadata:
          finalizers: []

  - name: Remove test resource handles
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceHandle
      name: "{{ handle.metadata.name }}"
      namespace: "{{ operator_namespace }}"
    loop: "{{ test_handles.resources }}"
    loop_control:
      label: "{{ handle.metadata.name }}"
      loop_var: handle

  - name: Get resource claim tests
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaimTest
      namespace: "{{ operator_test_namespace }}"
    register: resource_claim_tests

  - name: Remove resource claim tests
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaimTest
      name: "{{ resource_claim_test.metadata.name }}"
      namespace: "{{ operator_test_namespace }}"
    loop: "{{ resource_claim_tests.resources }}"
    loop_control:
      label: "{{ resource_claim_test.metadata.name }}"
      loop_var: resource_claim_test

  - name: Remove test ResourceProvider
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceProvider
      name: test
      namespace: "{{ operator_namespace }}"

  - name: Remove test-new ResourceProvider
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceProvider
      name: test-new
      namespace: "{{ operator_namespace }}"

  - name: Create test ResourceProvider
    k8s:
      state: present
      definition: "{{ lookup('template', 'test-resource-provider.yaml.j2') | from_yaml }}"

  - name: Create test-claim ResourceProvider
    k8s:
      state: present
      definition: "{{ lookup('template', 'test-resource-provider.yaml.j2') | from_yaml }}"
    vars:
      name: test-claim-required
      resource_requires_claim: True
      resource_namespace: '{% raw %}{{: resource_claim.metadata.namespace :}}{% endraw %}'

  - when:
    - restart | bool
    - not local_test | bool
    block:
    - name: Scale up operator
      command: oc scale deployment {{ operator_service_name }} -n {{ operator_namespace | quote }} --replicas=1

    - name: Pause for operator start-up
      pause:
        seconds: 35

  - name: Create ResourceClaim test-1
    k8s:
      state: present
      definition: "{{ resource_definition | from_yaml }}"
    vars:
      resource_definition: |
        apiVersion: {{ operator_domain }}/v1
        kind: ResourceClaim
        metadata:
          name: test-1
          namespace: {{ operator_test_namespace }}
        spec:
          resources:
          - template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
                generateName: test-
              spec:
                governor: test
                vars:
                  name: test-1
                  number: 23
          - template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test-claim-required
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
                generateName: test-claim-required-
              spec:
                governor: test
                vars:
                  name: test-1
                  number: 2323

  - name: Pause for resource generation
    pause:
      seconds: 10

  - name: Get resource handle for claim test-1
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceHandle
      namespace: "{{ operator_namespace }}"
      label_selectors:
      - "{{ operator_domain }}/resource-claim-name=test-1"
      - "{{ operator_domain }}/resource-claim-namespace={{ operator_test_namespace }}"
    register: resource_handle_for_test_1

  - name: Assert that exactly one handle for test-1 was found
    assert:
      that:
      - resource_handle_for_test_1.resources | length == 1
      fail_msg: One test-1 resource handle not found
      success_msg: One test-1 resource handle found

  - name: Check resource handle for test-1
    assert:
      that:
      - handle.metadata.finalizers[0] == operator_domain
      - handle.metadata.generateName == 'guid-'
      - handle.spec.resourceClaim.name == 'test-1'
      - handle.spec.resourceClaim.namespace == operator_test_namespace
      - handle.spec.resources[0].provider.name == 'test'
      - handle.spec.resources[0].provider.namespace == operator_namespace
      - handle.spec.resources[0].template.kind == 'ResourceClaimTest'
      - handle.spec.resources[0].template.spec.vars.name == 'test-1'
      - handle.spec.resources[0].template.spec.vars.number == 23
      fail_msg: test-1 handle not found as expected
      success_msg: test-1 handle found as expected
    vars:
      handle: "{{ resource_handle_for_test_1.resources[0] }}"

  - name: Get resource from handle for test-1
    k8s_facts:
      api_version: "{{ resource_ref.apiVersion }}"
      kind: "{{ resource_ref.kind }}"
      name: "{{ resource_ref.name }}"
      namespace: "{{ resource_ref.namespace | default('') }}"
    vars:
      handle: "{{ resource_handle_for_test_1.resources[0] }}"
      resource_ref: "{{ handle.spec.resources[0].reference }}"
    register: resource_for_test_1

  - name: Check resource for test-1
    assert:
      that:
      - resource.kind == 'ResourceClaimTest'
      - resource_annotations['{{ operator_domain }}/resource-claim-name'] == 'test-1'
      - resource_annotations['{{ operator_domain }}/resource-claim-namespace'] == operator_test_namespace
      - resource_annotations['{{ operator_domain }}/resource-handle-name'] == handle.metadata.name
      - resource_annotations['{{ operator_domain }}/resource-handle-namespace'] == handle.metadata.namespace
      - resource_annotations['{{ operator_domain }}/resource-handle-uid'] == handle.metadata.uid
      - resource_annotations['{{ operator_domain }}/resource-handle-version'] == handle.metadata.resourceVersion
      - resource_annotations['{{ operator_domain }}/resource-provider-name'] == 'test'
      - resource_annotations['{{ operator_domain }}/resource-provider-namespace'] == operator_namespace
      fail_msg: test-1 resource not found as expected
      success_msg: test-1 resource looks good
    vars:
      handle: "{{ resource_handle_for_test_1.resources[0] }}"
      resource: "{{ resource_for_test_1.resources[0] }}"
      resource_annotations: "{{ resource_for_test_1.resources[0].metadata.annotations }}"

  - name: Get resource claim test-1
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-1
      namespace: "{{ operator_test_namespace }}"
    register: test_1_claim

  - name: Check claim test-1
    assert:
      that:
      - claim.status.resources[0].state.kind == 'ResourceClaimTest'
      - claim.status.resources[0].state.metadata.namespace == operator_test_namespace
      - claim.status.resources[0].state.spec.vars.name == 'test-1'
      - claim.status.resources[0].state.spec.vars.number == 23
      fail_msg: test-1 resource not found as expected
      success_msg: test-1 resource looks good
    vars:
      claim: "{{ test_1_claim.resources[0] }}"

  - name: Update ResourceClaim test-1
    k8s:
      state: present
      definition: "{{ resource_definition }}"
    vars:
      resource_definition: |
        apiVersion: {{ operator_domain }}/v1
        kind: ResourceClaim
        metadata:
          name: test-1
          namespace: {{ operator_test_namespace }}
        spec:
          resources:
          - template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
              spec:
                governor: test
                vars:
                  desired_state: started
                  name: test-1
                  foo: bar
                  number: 42
          - template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test-claim-required
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
                generateName: test-claim-required-
              spec:
                governor: test
                vars:
                  name: test-1
                  number: 4242

  - name: Pause for claim resource status update
    pause:
      seconds: 5

  - name: Get resource handle for claim test-1
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceHandle
      namespace: "{{ operator_namespace }}"
      label_selectors:
      - "{{ operator_domain }}/resource-claim-name=test-1"
      - "{{ operator_domain }}/resource-claim-namespace={{ operator_test_namespace }}"
    register: resource_handle_for_test_1

  - name: Check update of resource handle for test-1
    assert:
      that:
      - handle.metadata.finalizers[0] == operator_domain
      - handle.metadata.generateName == 'guid-'
      - handle.spec.resourceClaim.name == 'test-1'
      - handle.spec.resourceClaim.namespace == operator_test_namespace
      - handle.spec.resources[0].provider.name == 'test'
      - handle.spec.resources[0].provider.namespace == operator_namespace
      - handle.spec.resources[0].template.kind == 'ResourceClaimTest'
      - handle.spec.resources[0].template.spec.vars.name == 'test-1'
      - handle.spec.resources[0].template.spec.vars.number == 42
      fail_msg: test-1 handle not found as expected
      success_msg: test-1 handle found as expected
    vars:
      handle: "{{ resource_handle_for_test_1.resources[0] }}"

  - name: Get resource claim test-1
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-1
      namespace: "{{ operator_test_namespace }}"
    register: test_1_claim

  - name: Check claim test-1 update
    assert:
      that:
      - status_resource.kind == 'ResourceClaimTest'
      - status_resource.metadata.namespace == operator_test_namespace
      - status_resource.spec.vars.name == 'test-1'
      # Check changes to var are rejected on the resource
      - status_resource.spec.vars.number == 23
      # Change to desired_state should go through
      - status_resource.spec.vars.desired_state == 'started'
      fail_msg: test-1 resource not found as expected
      success_msg: test-1 resource looks good
    vars:
      claim: "{{ test_1_claim.resources[0] }}"
      status_resource: "{{ claim.status.resources[0].state }}"

  - name: Delete resource claim test-1
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-1
      namespace: "{{ operator_test_namespace }}"

  - name: Pause for delete cascade
    pause:
      seconds: 2

  - name: Confirm resource deletion for test-1
    k8s_facts:
      api_version: "{{ resource_ref.apiVersion }}"
      kind: "{{ resource_ref.kind }}"
      name: "{{ resource_ref.name }}"
      namespace: "{{ resource_ref.namespace | default('') }}"
    vars:
      resource_ref: "{{ resource_handle_for_test_1.resources[0].spec.resources[0].reference }}"
    register: resource_for_test_1
    failed_when: resource_for_test_1.resources

  - name: Create test resource pool
    k8s:
      state: present
      definition: "{{ lookup('template', 'test-resource-pool.yaml.j2') | from_yaml }}"

  - name: Pause for poool handle creation
    pause:
      seconds: 2

  - name: Create ResourceClaim test-pool-match
    k8s:
      state: present
      definition: "{{ resource_definition | from_yaml }}"
    vars:
      resource_definition: |
        apiVersion: {{ operator_domain }}/v1
        kind: ResourceClaim
        metadata:
          name: test-pool-match
          namespace: {{ operator_test_namespace }}
        spec:
          resources:
          - template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
              spec:
                governor: test
                vars:
                  desired_state: started
                  name: test-pool
                  number: 23
          - template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test-claim-required
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
              spec:
                governor: test
                vars:
                  desired_state: started
                  name: test-pool
                  number: 2323

  - name: Create ResourceClaim test-pool-explicit
    k8s:
      state: present
      definition: "{{ resource_definition | from_yaml }}"
    vars:
      resource_definition: |
        apiVersion: {{ operator_domain }}/v1
        kind: ResourceClaim
        metadata:
          name: test-pool-explicit
          namespace: {{ operator_test_namespace }}
        spec:
          resources:
          - provider:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceProvider
              name: test
              namespace: {{ operator_namespace }}
            template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
              spec:
                governor: test
                vars:
                  desired_state: started
                  name: test-pool
                  number: 23
          - provider:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceProvider
              name: test-claim-required
              namespace: {{ operator_namespace }}
            template:
              apiVersion: {{ operator_domain }}/v1
              kind: ResourceClaimTest
              metadata:
                annotations:
                  {{ operator_domain }}/resource-provider-name: test-claim-required
                  {{ operator_domain }}/resource-provider-namespace: {{ operator_namespace }}
              spec:
                governor: test
                vars:
                  desired_state: started
                  name: test-pool
                  number: 2323

  - name: Pause for claim binding
    pause:
      seconds: 2

  - name: Get resource claim test-pool-match
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-pool-match
      namespace: "{{ operator_test_namespace }}"
    register: r_get_test_pool_match_claim

  - name: Get resource claim test-pool-explicit
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-pool-explicit
      namespace: "{{ operator_test_namespace }}"
    register: r_get_test_pool_explicit_claim

  - name: Check claim test-pool-match
    assert:
      that:
      - claim.status.resources[0].state.kind == 'ResourceClaimTest'
      - claim.status.resources[0].state.metadata.name.startswith('test-pool-')
      - claim.status.resources[0].state.metadata.namespace == operator_test_namespace
      - claim.status.resources[0].state.spec.vars.name == 'test-pool'
      - claim.status.resources[0].state.spec.vars.number == 23
      fail_msg: test-pool-match resource not found as expected
      success_msg: test-pool-match resource looks good
    vars:
      claim: "{{ r_get_test_pool_match_claim.resources[0] }}"

  - name: Check claim test-pool-explicit
    assert:
      that:
      - claim.status.resources[0].state.kind == 'ResourceClaimTest'
      - claim.status.resources[0].state.metadata.name.startswith('test-pool-')
      - claim.status.resources[0].state.metadata.namespace == operator_test_namespace
      - claim.status.resources[0].state.spec.vars.name == 'test-pool'
      - claim.status.resources[0].state.spec.vars.number == 23
      fail_msg: test-pool-explicit resource not found as expected
      success_msg: test-pool-explicit resource looks good
    vars:
      claim: "{{ r_get_test_pool_explicit_claim.resources[0] }}"

  - name: Delete test resource pool
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourcePool
      name: test
      namespace: "{{ operator_namespace }}"

  - name: Pause for pool clean-up
    pause:
      seconds: 2

  - name: Get resource handles from test pool
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceHandle
      namespace: "{{ operator_namespace }}"
      label_selectors:
      - "{{ operator_domain }}/resource-pool-name=test"
    register: r_get_test_pool_handles

  - name: Check test-pool handles
    assert:
      that:
      - r_get_test_pool_handles.resources | length == 2
      fail_msg: did not find 2 remaining handles from test resource pool
      success_msg: found 2 remaining handles from test resource pool

  - name: Delete resource claim test-pool-match
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-pool-match
      namespace: "{{ operator_test_namespace }}"

  - name: Delete resource claim test-pool-explicit
    k8s:
      state: absent
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceClaim
      name: test-pool-explicit
      namespace: "{{ operator_test_namespace }}"

  - name: Pause for claim clean-up
    pause:
      seconds: 2

  - name: Get resource handles from test pool
    k8s_facts:
      api_version: "{{ operator_domain }}/v1"
      kind: ResourceHandle
      namespace: "{{ operator_namespace }}"
      label_selectors:
      - "{{ operator_domain }}/resource-pool-name=test"
    register: r_get_test_pool_handles

  - name: Check test-pool handles are removed
    assert:
      that:
      - r_get_test_pool_handles.resources | length == 0
      fail_msg: found remaining test pool handles
      success_msg: all test pool handles have been cleaned up
