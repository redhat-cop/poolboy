---
- include_tasks:
    file: test-01.yaml

# OLD TESTS FOLLOW

- name: Create test ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-resource-provider.yaml.j2') | from_yaml }}"

- name: Create test-claim-required ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-claim-required-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim test-1
  kubernetes.core.k8s:
    state: present
    definition: "{{ _resource_definition | from_yaml }}"
  vars:
    _resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                name: test-1
                number: 23
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-claim-required-
            spec:
              governor: test
              vars:
                name: test-1
                number: 2323

- name: Get resource handle for claim test-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_1
  until: r_resource_handle_for_test_1.resources | length > 0
  retries: 5
  delay: 2

- name: Assert that exactly one handle for test-1 was found
  assert:
    that:
    - r_resource_handle_for_test_1.resources | length == 1
    fail_msg: One test-1 resource handle not found
    success_msg: One test-1 resource handle found

- name: Check resource handle for test-1
  assert:
    that:
    - _handle.metadata.finalizers[0] == poolboy_domain
    - _handle.metadata.generateName == 'guid-'
    - _handle.spec.resourceClaim.name == 'test-1'
    - _handle.spec.resourceClaim.namespace == poolboy_test_namespace
    - _handle.spec.resources[0].provider.name == 'test'
    - _handle.spec.resources[0].provider.namespace == poolboy_namespace
    - _handle.spec.resources[0].template.kind == 'ResourceClaimTest'
    - _handle.spec.resources[0].template.spec.vars.name == 'test-1'
    - _handle.spec.resources[0].template.spec.vars.number == 23
    fail_msg: test-1 handle not found as expected
    success_msg: test-1 handle found as expected
  vars:
    _handle: "{{ r_resource_handle_for_test_1.resources[0] }}"

- name: Get resource from handle for test-1
  kubernetes.core.k8s_info:
    api_version: "{{ resource_ref.apiVersion }}"
    kind: "{{ resource_ref.kind }}"
    name: "{{ resource_ref.name }}"
    namespace: "{{ resource_ref.namespace | default('') }}"
  vars:
    handle: "{{ r_resource_handle_for_test_1.resources[0] }}"
    resource_ref: "{{ handle.spec.resources[0].reference }}"
  register: resource_for_test_1

- name: Check resource for test-1
  assert:
    that:
    - resource.kind == 'ResourceClaimTest'
    - resource_annotations['{{ poolboy_domain }}/resource-claim-name'] == 'test-1'
    - resource_annotations['{{ poolboy_domain }}/resource-claim-namespace'] == poolboy_test_namespace
    - resource_annotations['{{ poolboy_domain }}/resource-handle-name'] == handle.metadata.name
    - resource_annotations['{{ poolboy_domain }}/resource-handle-namespace'] == handle.metadata.namespace
    - resource_annotations['{{ poolboy_domain }}/resource-handle-uid'] == handle.metadata.uid
    - resource_annotations['{{ poolboy_domain }}/resource-provider-name'] == 'test'
    - resource_annotations['{{ poolboy_domain }}/resource-provider-namespace'] == poolboy_namespace
    fail_msg: test-1 resource not found as expected
    success_msg: test-1 resource looks good
  vars:
    handle: "{{ r_resource_handle_for_test_1.resources[0] }}"
    resource: "{{ resource_for_test_1.resources[0] }}"
    resource_annotations: "{{ resource_for_test_1.resources[0].metadata.annotations }}"

- name: Check for ResourceClaim test-1 resource in status
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_1
  vars:
    _claim: "{{ r_get_test_1.resources[0] }}"
  failed_when: >-
    'state' not in _claim.status.resources[0]
  until: r_get_test_1 is success
  retries: 10
  delay: 3

- name: Check ResourceClaim test-1 resource in status values
  assert:
    that:
    - _claim.status.resources[0].state.kind == 'ResourceClaimTest'
    - _claim.status.resources[0].state.metadata.namespace == poolboy_test_namespace
    - _claim.status.resources[0].state.spec.vars.name == 'test-1'
    - _claim.status.resources[0].state.spec.vars.number == 23
    fail_msg: test-1 resource not found as expected
    success_msg: test-1 resource looks good
  vars:
    _claim: "{{ r_get_test_1.resources[0] }}"

- name: Update ResourceClaim test-1
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-1
                foo: bar
                number: 42
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-claim-required-
            spec:
              governor: test
              vars:
                name: test-1
                number: 4242

- name: Pause for claim resource status update
  pause:
    seconds: 5

- name: Get resource handle for claim test-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_1

- name: Check update of resource handle for test-1
  assert:
    that:
    - handle.metadata.finalizers[0] == poolboy_domain
    - handle.metadata.generateName == 'guid-'
    - handle.spec.resourceClaim.name == 'test-1'
    - handle.spec.resourceClaim.namespace == poolboy_test_namespace
    - handle.spec.resources[0].provider.name == 'test'
    - handle.spec.resources[0].provider.namespace == poolboy_namespace
    - handle.spec.resources[0].template.kind == 'ResourceClaimTest'
    - handle.spec.resources[0].template.spec.vars.name == 'test-1'
    - handle.spec.resources[0].template.spec.vars.number == 42
    fail_msg: test-1 handle not found as expected
    success_msg: test-1 handle found as expected
  vars:
    handle: "{{ r_resource_handle_for_test_1.resources[0] }}"

- name: Get resource claim test-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-1
    namespace: "{{ poolboy_test_namespace }}"
  register: test_1_claim

- name: Check claim test-1 update
  assert:
    that:
    - status_resource.kind == 'ResourceClaimTest'
    - status_resource.metadata.namespace == poolboy_test_namespace
    - status_resource.spec.vars.name == 'test-1'
    # Check changes to var are rejected on the resource
    - status_resource.spec.vars.number == 23
    # Change to desired_state should go through
    - status_resource.spec.vars.desired_state == 'started'
    fail_msg: test-1 resource not found as expected
    success_msg: test-1 resource looks good
  vars:
    claim: "{{ test_1_claim.resources[0] }}"
    status_resource: "{{ claim.status.resources[0].state }}"

- name: Delete resource claim test-1
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Verify resource deletion for test-1
  kubernetes.core.k8s_info:
    api_version: "{{ resource_ref.apiVersion }}"
    kind: "{{ resource_ref.kind }}"
    name: "{{ resource_ref.name }}"
    namespace: "{{ resource_ref.namespace | default('') }}"
  vars:
    resource_ref: "{{ r_resource_handle_for_test_1.resources[0].spec.resources[0].reference }}"
  register: r_verify_resource_deletion
  failed_when: r_verify_resource_deletion.resources | length > 0
  until: r_verify_resource_deletion is success
  retries: 5
  delay: 2

- name: Create test-explicit ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-explicit-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim test-explicit-1
  kubernetes.core.k8s:
    state: present
    definition: "{{ _resource_definition | from_yaml }}"
  vars:
    _resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-explicit-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-explicit
            namespace: {{ poolboy_namespace }}

- name: Wait for resource handle for claim test-explicit-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-explicit-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_explicit_1
  vars:
    _handle: "{{ r_resource_handle_for_test_explicit_1.resources[0] }}"
  until:
  - r_resource_handle_for_test_explicit_1.resources | length > 0
  - _handle.spec.resources[0].provider.name == 'test-explicit'
  - _handle.spec.resources[0].template.spec.governor == 'test'
  - _handle.spec.resources[0].template.spec.vars.desired_state == 'started'
  retries: 5
  delay: 2

- name: Delete ResourceClaim test-explicit-1
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-explicit-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Wait for resource handle delete of test-explicit-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-explicit-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_explicit_1
  until:
  - r_resource_handle_for_test_explicit_1.resources | length == 0
  retries: 5
  delay: 2

- name: Delete ResourceProvider test-explicit
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceProvider
    name: test-explicit
    namespace: "{{ poolboy_namespace }}"

- name: Create test-name ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-name-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim test-name-1
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-name-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - name: one
          provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-name
            namespace: {{ poolboy_namespace }}
        - name: two
          provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-name
            namespace: {{ poolboy_namespace }}

- name: Verify test-name-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-name-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_test_name_1_claim
  vars:
    claim: "{{ r_test_name_1_claim.resources[0] | default(false) }}"
  failed_when: >-
    not claim or
    claim.spec.resources[0].name != 'one' or
    claim.status.resources[0].name != 'one' or
    claim.status.resources[0].state.metadata.name != 'test-name-one' or
    claim.spec.resources[1].name != 'two' or
    claim.status.resources[1].name != 'two' or
    claim.status.resources[1].state.metadata.name != 'test-name-two'
  until: r_test_name_1_claim is success
  retries: 5
  delay: 2

- name: Delete ResourceClaim test-name-1
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-name-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Verify Delete test-name-one resources
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaimTest
    name: test-name-one
    namespace: "{{ poolboy_test_namespace }}"
  register: r_test_name_one
  failed_when: >-
    r_test_name_one.resources | default([]) | length != 0
  until: r_test_name_one is success
  retries: 5
  delay: 2

- name: Verify Delete test-name-two resources
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaimTest
    name: test-name-two
    namespace: "{{ poolboy_test_namespace }}"
  register: r_test_name_two
  failed_when: >-
    r_test_name_two.resources | default([]) | length != 0
  until: r_test_name_two is success
  retries: 5
  delay: 2

- name: Delete ResourceProvider test-name
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceProvider
    name: test-explicit
    namespace: "{{ poolboy_namespace }}"

- name: Create test resource pool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-resource-pool.yaml.j2') | from_yaml }}"

- name: Get ResourceHandle for pool
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
    - "{{ poolboy_domain }}/resource-pool-namespace={{ poolboy_namespace }}"
  register: r_get_pool_resource_handle
  failed_when: >-
    r_get_pool_resource_handle.resources | length != 1
  until: r_get_pool_resource_handle is success
  retries: 10
  delay: 1

- name: Set first_pool_resource_handle_name
  set_fact:
    first_pool_resource_handle_name: "{{ r_get_pool_resource_handle.resources[0].metadata.name }}"

- name: Scale up resource pool
  kubernetes.core.k8s:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourcePool
    namespace: "{{ poolboy_namespace }}"
    name: test
    definition:
      spec:
        minAvailable: 3

- name: Verify pool scale-up
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
    - "{{ poolboy_domain }}/resource-pool-namespace={{ poolboy_namespace }}"
  register: r_get_pool_resource_handle
  failed_when: >-
    r_get_pool_resource_handle.resources | length != 3
  until: r_get_pool_resource_handle is success
  retries: 10
  delay: 1

- name: Create ResourceClaim test-pool-match
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-pool-match
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 23
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 2323

- name: Verify claim test-pool-match
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-match
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_pool_match_claim
  vars:
    claim: "{{ r_get_test_pool_match_claim.resources[0] }}"
  failed_when: >-
    claim.status.resources[0].state.kind != 'ResourceClaimTest' or
    not claim.status.resources[0].state.metadata.name.startswith('test-pool-') or
    claim.status.resources[0].state.metadata.namespace != poolboy_test_namespace or
    claim.status.resources[0].state.metadata.annotations[poolboy_domain ~ '/resource-pool-name'] != 'test' or
    claim.status.resources[0].state.spec.vars.name != 'test-pool' or
    claim.status.resources[0].state.spec.vars.number != 23 or
    claim.status.resourceHandle.name != first_pool_resource_handle_name or
    claim.status.resources[0].state.spec.vars.desired_state != 'started'
  until: r_get_test_pool_match_claim is success
  retries: 10
  delay: 1

- name: Create ResourceClaim test-pool-explicit
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-pool-explicit
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test
            namespace: {{ poolboy_namespace }}
          template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 23
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-claim-required
            namespace: {{ poolboy_namespace }}
          template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 2323

- name: Verify resource claim test-pool-explicit
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-explicit
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_pool_explicit_claim
  vars:
    claim: "{{ r_get_test_pool_explicit_claim.resources[0] }}"
  failed_when: >-
    claim.status.resources[0].state.kind != 'ResourceClaimTest' or
    not claim.status.resources[0].state.metadata.name.startswith('test-pool-') or
    claim.status.resources[0].state.metadata.namespace != poolboy_test_namespace or
    claim.status.resources[0].state.spec.vars.name != 'test-pool' or
    claim.status.resources[0].state.spec.vars.number != 23
  until: r_get_test_pool_explicit_claim is success
  retries: 10
  delay: 1

- name: Delete test resource pool
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourcePool
    name: test
    namespace: "{{ poolboy_namespace }}"

- name: Pause for pool clean-up
  pause:
    seconds: 2

- name: Get resource handles from test pool
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
  register: r_get_test_pool_handles

- name: Check test-pool handles
  assert:
    that:
    - r_get_test_pool_handles.resources | length == 2
    fail_msg: did not find 2 remaining handles from test resource pool
    success_msg: found 2 remaining handles from test resource pool

- name: Delete resource claim test-pool-match
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-match
    namespace: "{{ poolboy_test_namespace }}"

- name: Delete resource claim test-pool-explicit
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-explicit
    namespace: "{{ poolboy_test_namespace }}"

- name: Verify that test-pool handles are removed
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
  register: r_verify_test_pool_handle_deletion
  failed_when: r_verify_test_pool_handle_deletion.resources | length != 0
  until: r_verify_test_pool_handle_deletion is success
  delay: 2
  retries: 10

- name: Create test-templated ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-templated-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim for test-templated-1
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-templated-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-templated
            namespace: {{ poolboy_namespace }}

- name: Verify ResourceClaim test-templated-1 started
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-templated-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_templated_1
  vars:
    __test_templated_1: "{{ r_get_test_templated_1.resources[0] | default({}) }}"
    __test_resource: "{{ __test_templated_1.status.resources[0].state | default({}) }}"
  failed_when: >-
    __test_resource.spec.vars.desired_state | default('') != 'started'
  until: r_get_test_templated_1 is success
  delay: 5
  retries: 3

- name: Verify ResourceClaim test-templated-1 transition to stopped
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-templated-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_templated_1
  vars:
    __test_templated_1: "{{ r_get_test_templated_1.resources[0] | default({}) }}"
    __test_resource: "{{ __test_templated_1.status.resources[0].state | default({}) }}"
  failed_when: >-
    __test_resource.spec.vars.desired_state | default('') != 'stopped'
  until: r_get_test_templated_1 is success
  delay: 5
  retries: 10

- name: Delete resource claim test-templated-1
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-templated-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Create test-lifespan ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-lifespan-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim for test-lifespan-1
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-lifespan-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-lifespan
            namespace: {{ poolboy_namespace }}

- name: Verify ResourceClaim test-lifespan-1 created
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_lifespan_1
  vars:
    __test_lifespan_1: "{{ r_get_test_lifespan_1.resources[0] | default({}) }}"
  failed_when: >-
    __test_lifespan_1.status.lifespan.start is undefined or
    __test_lifespan_1.status.lifespan.end is undefined or
    40 != (__test_lifespan_1.status.lifespan.end | to_datetime('%Y-%m-%dT%H:%M:%SZ') - __test_lifespan_1.status.lifespan.start | to_datetime('%Y-%m-%dT%H:%M:%SZ')).total_seconds()
  until: r_get_test_lifespan_1 is success
  delay: 5
  retries: 10

- name: Verify ResourceClaim test-lifespan-1 deleted
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_lifespan_1
  failed_when: >-
    r_get_test_lifespan_1.resources | length > 0
  until: r_get_test_lifespan_1 is success
  delay: 5
  retries: 10

- name: Create ResourceClaim for test-lifespan-2
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-lifespan-2
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-lifespan
            namespace: {{ poolboy_namespace }}

- name: Verify ResourceClaim test-lifespan-2 created
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-2
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_lifespan_2
  vars:
    __test_lifespan_2: "{{ r_get_test_lifespan_2.resources[0] | default({}) }}"
  failed_when: >-
    __test_lifespan_2.status.lifespan.start is undefined or
    __test_lifespan_2.status.lifespan.end is undefined or
    40 != (__test_lifespan_2.status.lifespan.end | to_datetime('%Y-%m-%dT%H:%M:%SZ') - __test_lifespan_2.status.lifespan.start | to_datetime('%Y-%m-%dT%H:%M:%SZ')).total_seconds()
  until: r_get_test_lifespan_2 is success
  delay: 5
  retries: 10

- name: Update ResourceClaim test-lifespan-2 to extend lifespan
  vars:
    __test_lifespan_2: "{{ r_get_test_lifespan_2.resources[0] | default({}) }}"
  kubernetes.core.k8s:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-2
    namespace: "{{ poolboy_test_namespace }}"
    definition:
      spec:
        lifespan:
          end: >-
            {{ "%Y-%m-%dT%H:%M:%SZ" | strftime(
              50 + (__test_lifespan_2.status.lifespan.start | to_datetime('%Y-%m-%dT%H:%M:%SZ')).timestamp()
            ) }}

- name: Verify ResourceClaim test-lifespan-2 lifespan extended
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-2
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_lifespan_2
  vars:
    __test_lifespan_2: "{{ r_get_test_lifespan_2.resources[0] | default({}) }}"
  failed_when: >-
    __test_lifespan_2.status.lifespan.start is undefined or
    __test_lifespan_2.status.lifespan.end is undefined or
    50 != (__test_lifespan_2.status.lifespan.end | to_datetime('%Y-%m-%dT%H:%M:%SZ') - __test_lifespan_2.status.lifespan.start | to_datetime('%Y-%m-%dT%H:%M:%SZ')).total_seconds()
  until: r_get_test_lifespan_2 is success
  delay: 5
  retries: 10

- name: Verify ResourceClaim test-lifespan-2 deleted
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-2
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_lifespan_2
  failed_when: >-
    r_get_test_lifespan_2.resources | length > 0
  until: r_get_test_lifespan_2 is success
  delay: 5
  retries: 10

- name: Create test-lifespan resource pool
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-lifespan-resource-pool.yaml.j2') | from_yaml }}"

- name: Verify ResourceHandle for test-lifespan ResourcePool
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test-lifespan"
    - "{{ poolboy_domain }}/resource-pool-namespace={{ poolboy_namespace }}"
  register: r_get_pool_resource_handle
  vars:
    __handle: "{{ r_get_pool_resource_handle.resources[0] | default({}) }}"
  failed_when: >-
    r_get_pool_resource_handle.resources | length != 1 or
    __handle.spec.lifespan.default != '23s' or
    __handle.spec.lifespan.maximum != '2h' or
    __handle.spec.lifespan.relativeMaximum != '1h' or
    ((__handle.spec.lifespan.end | to_datetime('%Y-%m-%dT%H:%M:%SZ') - __handle.metadata.creationTimestamp | to_datetime('%Y-%m-%dT%H:%M:%SZ')).total_seconds() - 3600) | abs > 2
  until: r_get_pool_resource_handle is success
  retries: 10
  delay: 1

- name: Create ResourceClaim for test-lifespan-3
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-lifespan-3
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-lifespan
            namespace: {{ poolboy_namespace }}

- name: Verify ResourceClaim test-lifespan-3 bound to pool
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-lifespan-3
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_lifespan_3
  vars:
    __test_lifespan_3: "{{ r_get_test_lifespan_3.resources[0] | default({}) }}"
  failed_when: >-
    __test_lifespan_3.status.lifespan.start is undefined or
    __test_lifespan_3.status.lifespan.end is undefined or
    23 != (__test_lifespan_3.status.lifespan.end | to_datetime('%Y-%m-%dT%H:%M:%SZ') - __test_lifespan_3.status.lifespan.start | to_datetime('%Y-%m-%dT%H:%M:%SZ')).total_seconds()
  until: r_get_test_lifespan_3 is success
  delay: 5
  retries: 10

- name: Create test-disable-creation ResourceProvider
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'test-disable-creation-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim for test-disable-creation
  kubernetes.core.k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-disable-creation
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-disable-creation
            namespace: {{ poolboy_namespace }}
          template:
            spec:
              testvalue: "foo"

- name: Verify ResourceClaim test-disable-creation unbound
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-disable-creation
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_disable_creation
  vars:
    __claim: "{{ r_get_disable_creation.resources[0] | default({}) }}"
  failed_when: >-
    "provider" not in __claim.status.resources[0] | default({}) or
    "resourceHandle" in __claim.status | default({})
  until: r_get_disable_creation is success
  delay: 2
  retries: 5

- name: Create ResourceHandle for test-disable-creation
  kubernetes.core.k8s:
    definition:
      apiVersion: "{{ poolboy_domain }}/v1"
      kind: ResourceHandle
      metadata:
        name: guid-test-disable-creation
        namespace: "{{ poolboy_namespace }}"
      spec:
        resources:
        - provider:
            apiVersion: "{{ poolboy_domain }}/v1"
            kind: ResourceProvider
            name: test-disable-creation
            namespace: "{{ poolboy_namespace }}"
          template:
            spec:
              testvalue: "foo"

- name: Verify ResourceClaim test-disable-creation binds
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-disable-creation
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_disable_creation
  vars:
    __claim: "{{ r_get_disable_creation.resources[0] | default({}) }}"
  failed_when: >-
    "resourceHandle" not in __claim.status
  until: r_get_disable_creation is success
  delay: 2
  retries: 30

- name: Delete ResourceClaim test-disable-creation
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-disable-creation
    namespace: "{{ poolboy_test_namespace }}"

- name: Create test-base ResourceProvider
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'test-base-resource-provider.yaml.j2') | from_yaml }}"

- name: Create test-linked ResourceProvider
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'test-linked-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim foo test-linked-1
  kubernetes.core.k8s:
    definition: "{{ _resource_definition | from_yaml }}"
  vars:
    _resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-linked-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-base
            namespace: {{ poolboy_namespace }}
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-linked
            namespace: {{ poolboy_namespace }}

- name: Verify handling test-linked-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-linked-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_test_linked_1_claim
  vars:
    claim: "{{ r_test_linked_1_claim.resources[0] | default(false) }}"
  failed_when: >-
    not claim or
    not claim.status or
    not claim.status.resourceHandle or
    not claim.status.resources | length == 2 or
    claim.status.resources[0].state is not defined or
    claim.status.resources[1].state is defined
  until: r_test_linked_1_claim is success
  retries: 5
  delay: 2

- name: Update ResourceClaimTest to set provision_vars for test-linked-1
  kubernetes.core.k8s:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaimTest
    name: "{{ r_test_linked_1_claim.resources[0].status.resources[0].state.metadata.name }}"
    namespace: "{{ poolboy_test_namespace }}"
    definition:
      spec:
        vars:
          provision_vars:
            test_value: foo

- name: Verify handling of update for test-linked-1
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-linked-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_test_linked_1_claim
  vars:
    claim: "{{ r_test_linked_1_claim.resources[0] | default(false) }}"
  failed_when: >-
    not claim or
    not claim.status or
    not claim.status.resourceHandle or
    not claim.status.resources | length == 2 or
    not claim.status.resources[0].state is defined or
    not claim.status.resources[1].state is defined or
    not claim.status.resources[1].state.spec.vars.test_value == 'foo'
  until: r_test_linked_1_claim is success
  retries: 5
  delay: 2

- name: Create ResourceHandle for test-linked-2
  kubernetes.core.k8s:
    definition:
      apiVersion: "{{ poolboy_domain }}/v1"
      kind: ResourceHandle
      metadata:
        name: guid-test-linked-2
        namespace: "{{ poolboy_namespace }}"
      spec:
        resources:
        - provider:
            apiVersion: poolboy.dev.local/v1
            kind: ResourceProvider
            name: test-base
            namespace: "{{ poolboy_namespace}}"

- name: Update ResourceClaimTest to set provision_vars for test-linked-2
  kubernetes.core.k8s:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaimTest
    name: test-base-test-linked-2
    namespace: "{{ poolboy_test_namespace }}"
    definition:
      spec:
        vars:
          provision_vars:
            test_value: bar

- name: Create ResourceClaim test-linked-2
  kubernetes.core.k8s:
    definition: "{{ _resource_definition | from_yaml }}"
  vars:
    _resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-linked-2
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-base
            namespace: {{ poolboy_namespace }}
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-linked
            namespace: {{ poolboy_namespace }}

- name: Verify handling test-linked-2
  kubernetes.core.k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-linked-2
    namespace: "{{ poolboy_test_namespace }}"
  register: r_test_linked_2_claim
  vars:
    claim: "{{ r_test_linked_2_claim.resources[0] | default(false) }}"
  failed_when: >-
    not claim or
    not claim.status or
    not claim.status.resourceHandle or
    not claim.status.resourceHandle.name == 'guid-test-linked-2' or
    not claim.status.resources | length == 2 or
    not claim.status.resources[0].state is defined or
    not claim.status.resources[1].state is defined or
    not claim.status.resources[1].state.spec.vars.test_value == 'bar'
  until: r_test_linked_2_claim is success
  retries: 5
  delay: 2

- name: Delete ResourceClaim test-linked-1
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-linked-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Delete ResourceClaim test-linked-2
  kubernetes.core.k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-linked-1
    namespace: "{{ poolboy_test_namespace }}"
