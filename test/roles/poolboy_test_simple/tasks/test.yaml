---
- name: Create test ResourceProvider
  k8s:
    state: present
    definition: "{{ lookup('template', 'test-resource-provider.yaml.j2') | from_yaml }}"

- name: Create test-claim-required ResourceProvider
  k8s:
    state: present
    definition: "{{ lookup('template', 'test-claim-required-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim test-1
  k8s:
    state: present
    definition: "{{ _resource_definition | from_yaml }}"
  vars:
    _resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                name: test-1
                number: 23
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-claim-required-
            spec:
              governor: test
              vars:
                name: test-1
                number: 2323

- name: Get resource handle for claim test-1
  k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_1
  until: r_resource_handle_for_test_1.resources | length > 0
  retries: 5
  delay: 2

- name: Assert that exactly one handle for test-1 was found
  assert:
    that:
    - r_resource_handle_for_test_1.resources | length == 1
    fail_msg: One test-1 resource handle not found
    success_msg: One test-1 resource handle found

- name: Check resource handle for test-1
  assert:
    that:
    - _handle.metadata.finalizers[0] == poolboy_domain
    - _handle.metadata.generateName == 'guid-'
    - _handle.spec.resourceClaim.name == 'test-1'
    - _handle.spec.resourceClaim.namespace == poolboy_test_namespace
    - _handle.spec.resources[0].provider.name == 'test'
    - _handle.spec.resources[0].provider.namespace == poolboy_namespace
    - _handle.spec.resources[0].template.kind == 'ResourceClaimTest'
    - _handle.spec.resources[0].template.spec.vars.name == 'test-1'
    - _handle.spec.resources[0].template.spec.vars.number == 23
    fail_msg: test-1 handle not found as expected
    success_msg: test-1 handle found as expected
  vars:
    _handle: "{{ r_resource_handle_for_test_1.resources[0] }}"

- name: Get resource from handle for test-1
  k8s_facts:
    api_version: "{{ resource_ref.apiVersion }}"
    kind: "{{ resource_ref.kind }}"
    name: "{{ resource_ref.name }}"
    namespace: "{{ resource_ref.namespace | default('') }}"
  vars:
    handle: "{{ r_resource_handle_for_test_1.resources[0] }}"
    resource_ref: "{{ handle.spec.resources[0].reference }}"
  register: resource_for_test_1

- name: Check resource for test-1
  assert:
    that:
    - resource.kind == 'ResourceClaimTest'
    - resource_annotations['{{ poolboy_domain }}/resource-claim-name'] == 'test-1'
    - resource_annotations['{{ poolboy_domain }}/resource-claim-namespace'] == poolboy_test_namespace
    - resource_annotations['{{ poolboy_domain }}/resource-handle-name'] == handle.metadata.name
    - resource_annotations['{{ poolboy_domain }}/resource-handle-namespace'] == handle.metadata.namespace
    - resource_annotations['{{ poolboy_domain }}/resource-handle-uid'] == handle.metadata.uid
    - resource_annotations['{{ poolboy_domain }}/resource-handle-version'] == handle.metadata.resourceVersion
    - resource_annotations['{{ poolboy_domain }}/resource-provider-name'] == 'test'
    - resource_annotations['{{ poolboy_domain }}/resource-provider-namespace'] == poolboy_namespace
    fail_msg: test-1 resource not found as expected
    success_msg: test-1 resource looks good
  vars:
    handle: "{{ r_resource_handle_for_test_1.resources[0] }}"
    resource: "{{ resource_for_test_1.resources[0] }}"
    resource_annotations: "{{ resource_for_test_1.resources[0].metadata.annotations }}"

- name: Check for ResourceClaim test-1 resource in status
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-1
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_1
  vars:
    _claim: "{{ r_get_test_1.resources[0] }}"
  failed_when: >-
    'state' not in _claim.status.resources[0]
  until: r_get_test_1 is success
  retries: 10
  delay: 3

- name: Check ResourceClaim test-1 resource in status values
  assert:
    that:
    - _claim.status.resources[0].state.kind == 'ResourceClaimTest'
    - _claim.status.resources[0].state.metadata.namespace == poolboy_test_namespace
    - _claim.status.resources[0].state.spec.vars.name == 'test-1'
    - _claim.status.resources[0].state.spec.vars.number == 23
    fail_msg: test-1 resource not found as expected
    success_msg: test-1 resource looks good
  vars:
    _claim: "{{ r_get_test_1.resources[0] }}"

- name: Update ResourceClaim test-1
  k8s:
    state: present
    definition: "{{ resource_definition }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-1
                foo: bar
                number: 42
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              generateName: test-claim-required-
            spec:
              governor: test
              vars:
                name: test-1
                number: 4242

- name: Pause for claim resource status update
  pause:
    seconds: 5

- name: Get resource handle for claim test-1
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_1

- name: Check update of resource handle for test-1
  assert:
    that:
    - handle.metadata.finalizers[0] == poolboy_domain
    - handle.metadata.generateName == 'guid-'
    - handle.spec.resourceClaim.name == 'test-1'
    - handle.spec.resourceClaim.namespace == poolboy_test_namespace
    - handle.spec.resources[0].provider.name == 'test'
    - handle.spec.resources[0].provider.namespace == poolboy_namespace
    - handle.spec.resources[0].template.kind == 'ResourceClaimTest'
    - handle.spec.resources[0].template.spec.vars.name == 'test-1'
    - handle.spec.resources[0].template.spec.vars.number == 42
    fail_msg: test-1 handle not found as expected
    success_msg: test-1 handle found as expected
  vars:
    handle: "{{ r_resource_handle_for_test_1.resources[0] }}"

- name: Get resource claim test-1
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-1
    namespace: "{{ poolboy_test_namespace }}"
  register: test_1_claim

- name: Check claim test-1 update
  assert:
    that:
    - status_resource.kind == 'ResourceClaimTest'
    - status_resource.metadata.namespace == poolboy_test_namespace
    - status_resource.spec.vars.name == 'test-1'
    # Check changes to var are rejected on the resource
    - status_resource.spec.vars.number == 23
    # Change to desired_state should go through
    - status_resource.spec.vars.desired_state == 'started'
    fail_msg: test-1 resource not found as expected
    success_msg: test-1 resource looks good
  vars:
    claim: "{{ test_1_claim.resources[0] }}"
    status_resource: "{{ claim.status.resources[0].state }}"

- name: Delete resource claim test-1
  k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Pause for delete cascade
  pause:
    seconds: 2

- name: Confirm resource deletion for test-1
  k8s_facts:
    api_version: "{{ resource_ref.apiVersion }}"
    kind: "{{ resource_ref.kind }}"
    name: "{{ resource_ref.name }}"
    namespace: "{{ resource_ref.namespace | default('') }}"
  vars:
    resource_ref: "{{ r_resource_handle_for_test_1.resources[0].spec.resources[0].reference }}"
  register: resource_for_test_1
  failed_when: resource_for_test_1.resources

- name: Create test-explicit ResourceProvider
  k8s:
    state: present
    definition: "{{ lookup('template', 'test-explicit-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim test-explicit-1
  k8s:
    state: present
    definition: "{{ _resource_definition | from_yaml }}"
  vars:
    _resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-explicit-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-explicit
            namespace: {{ poolboy_namespace }}

- name: Wait for resource handle for claim test-explicit-1
  k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-explicit-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_explicit_1
  vars:
    _handle: "{{ r_resource_handle_for_test_explicit_1.resources[0] }}"
  until:
  - r_resource_handle_for_test_explicit_1.resources | length > 0
  - _handle.spec.resources[0].provider.name == 'test-explicit'
  - _handle.spec.resources[0].template.spec.governor == 'test'
  - _handle.spec.resources[0].template.spec.vars.desired_state == 'started'
  retries: 5
  delay: 2

- name: Delete ResourceClaim test-explicit-1
  k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-explicit-1
    namespace: "{{ poolboy_test_namespace }}"

- name: Wait for resource handle delete of test-explicit-1
  k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-claim-name=test-explicit-1"
    - "{{ poolboy_domain }}/resource-claim-namespace={{ poolboy_test_namespace }}"
  register: r_resource_handle_for_test_explicit_1
  until:
  - r_resource_handle_for_test_explicit_1.resources | length == 0
  retries: 5
  delay: 2

- name: Delete ResourceClaim test-explicit-1
  k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceProvider
    name: test-explicit
    namespace: "{{ poolboy_namespace }}"

- name: Create test resource pool
  k8s:
    state: present
    definition: "{{ lookup('template', 'resource-pool.yaml.j2') | from_yaml }}"

- name: Get ResourceHandle for pool
  k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
    - "{{ poolboy_domain }}/resource-pool-namespace={{ poolboy_namespace }}"
  register: r_get_pool_resource_handle
  failed_when: >-
    r_get_pool_resource_handle.resources | length != 1
  until: r_get_pool_resource_handle is success
  retries: 10
  delay: 1

- name: Set first_pool_resource_handle_name
  set_fact:
    first_pool_resource_handle_name: "{{ r_get_pool_resource_handle.resources[0].metadata.name }}"

- name: Scale up resource pool
  k8s:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourcePool
    namespace: "{{ poolboy_namespace }}"
    name: test
    definition:
      spec:
        minAvailable: 3

- name: Verify pool scale-up
  k8s_info:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
    - "{{ poolboy_domain }}/resource-pool-namespace={{ poolboy_namespace }}"
  register: r_get_pool_resource_handle
  failed_when: >-
    r_get_pool_resource_handle.resources | length != 3
  until: r_get_pool_resource_handle is success
  retries: 10
  delay: 1

- name: Create ResourceClaim test-pool-match
  k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-pool-match
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 23
        - template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 2323

- debug: var=first_pool_resource_handle_name

- name: Verify claim test-pool-match
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-match
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_pool_match_claim
  vars:
    claim: "{{ r_get_test_pool_match_claim.resources[0] }}"
  failed_when: >-
    claim.status.resources[0].state.kind != 'ResourceClaimTest' or
    not claim.status.resources[0].state.metadata.name.startswith('test-pool-') or
    claim.status.resources[0].state.metadata.namespace != poolboy_test_namespace or
    claim.status.resources[0].state.spec.vars.name != 'test-pool' or
    claim.status.resources[0].state.spec.vars.number != 23 or
    claim.status.resourceHandle.name != first_pool_resource_handle_name
  until: r_get_test_pool_match_claim is success
  retries: 10
  delay: 1

- name: Create ResourceClaim test-pool-explicit
  k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-pool-explicit
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test
            namespace: {{ poolboy_namespace }}
          template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
              namespace: {{ poolboy_test_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 23
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-claim-required
            namespace: {{ poolboy_namespace }}
          template:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceClaimTest
            metadata:
              annotations:
                {{ poolboy_domain }}/resource-provider-name: test-claim-required
                {{ poolboy_domain }}/resource-provider-namespace: {{ poolboy_namespace }}
            spec:
              governor: test
              vars:
                desired_state: started
                name: test-pool
                number: 2323

- name: Verify resource claim test-pool-explicit
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-explicit
    namespace: "{{ poolboy_test_namespace }}"
  register: r_get_test_pool_explicit_claim
  vars:
    claim: "{{ r_get_test_pool_explicit_claim.resources[0] }}"
  failed_when: >-
    claim.status.resources[0].state.kind != 'ResourceClaimTest' or
    not claim.status.resources[0].state.metadata.name.startswith('test-pool-') or
    claim.status.resources[0].state.metadata.namespace != poolboy_test_namespace or
    claim.status.resources[0].state.spec.vars.name != 'test-pool' or
    claim.status.resources[0].state.spec.vars.number != 23
  until: r_get_test_pool_explicit_claim is success
  retries: 10
  delay: 1

- name: Delete test resource pool
  k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourcePool
    name: test
    namespace: "{{ poolboy_namespace }}"

- name: Pause for pool clean-up
  pause:
    seconds: 2

- name: Get resource handles from test pool
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
  register: r_get_test_pool_handles

- name: Check test-pool handles
  assert:
    that:
    - r_get_test_pool_handles.resources | length == 2
    fail_msg: did not find 2 remaining handles from test resource pool
    success_msg: found 2 remaining handles from test resource pool

- name: Delete resource claim test-pool-match
  k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-match
    namespace: "{{ poolboy_test_namespace }}"

- name: Delete resource claim test-pool-explicit
  k8s:
    state: absent
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceClaim
    name: test-pool-explicit
    namespace: "{{ poolboy_test_namespace }}"

- name: Pause for claim clean-up
  pause:
    seconds: 2

- name: Get resource handles from test pool
  k8s_facts:
    api_version: "{{ poolboy_domain }}/v1"
    kind: ResourceHandle
    namespace: "{{ poolboy_namespace }}"
    label_selectors:
    - "{{ poolboy_domain }}/resource-pool-name=test"
  register: r_get_test_pool_handles

- name: Check test-pool handles are removed
  assert:
    that:
    - r_get_test_pool_handles.resources | length == 0
    fail_msg: found remaining test pool handles
    success_msg: all test pool handles have been cleaned up

- name: Create test-templated ResourceProvider
  k8s:
    state: present
    definition: "{{ lookup('template', 'test-templated-resource-provider.yaml.j2') | from_yaml }}"

- name: Create ResourceClaim for test-templated-1
  k8s:
    state: present
    definition: "{{ resource_definition | from_yaml }}"
  vars:
    resource_definition: |
      apiVersion: {{ poolboy_domain }}/v1
      kind: ResourceClaim
      metadata:
        name: test-templated-1
        namespace: {{ poolboy_test_namespace }}
        labels:
          {{ poolboy_domain }}/test: simple
      spec:
        resources:
        - provider:
            apiVersion: {{ poolboy_domain }}/v1
            kind: ResourceProvider
            name: test-templated
            namespace: {{ poolboy_namespace }}

- fail:
