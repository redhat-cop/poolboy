---
apiVersion: {{ poolboy_domain }}/v1
kind: ResourceProvider
metadata:
  name: test-templated
  namespace: {{ poolboy_namespace }}
{% raw %}
spec:
  # Override is automatically applied when handle is processed
  # Claim init is applied to the claim when it created
  default:
    spec:
      vars:
        action_schedule:
          start: "{{ timestamp.utcnow }}"
          stop: "{{ timestamp.utcnow.add('30s') }}"
  override:
{% endraw %}
    apiVersion: {{ poolboy_domain }}/v1
{% raw %}
    kind: ResourceClaimTest
    metadata:
      generateName: test-templated-
{% endraw %}
      namespace: {{ poolboy_test_namespace }}
{% raw %}
    spec:
      vars:
        desired_state: >-
          {%- if resource_template.spec.vars.action_schedule.start | default('') == ''
            or resource_template.spec.vars.action_schedule.stop | default('') == '' -%}
          {{ resource_template.spec.vars.default_desired_state | default('stopped') }}
          {%- elif timestamp(resource_template.spec.vars.action_schedule.start) > timestamp.utcnow
            or timestamp(resource_template.spec.vars.action_schedule.stop) < timestamp.utcnow -%}
          stopped
          {%- else -%}
          started
          {%- endif -%}
        guid: >-
          {{ resource_handle.metadata.name[5:]
           if resource_handle.metadata.name.startswith('guid-')
           else resource_handle.metadata.name }}
  resourceRequiresClaim: false
  template:
    enable: true
  updateFilters:
  - pathMatch: /spec/var/action_schedule/destroy
    allowedOps: ['add', 'replace']
  - pathMatch: /spec/var/action_schedule/stop
    allowedOps: ['add', 'replace']
  - pathMatch: /spec/vars/desired_state
    allowedOps: ['add', 'replace']
  validation:
    # FIXME - Implement these...
    customValidation:
    - name: spec.vars.action_schedule.start must be less than spec.vars.action_schedule.stop
      check: >-
        timestamp(spec.vars.action_schedule.start) < timestamp(spec.vars.action_schedule.stop)
    - name: spec.vars.action_schedule.stop must be less than 8 hours after spec.vars.action_schedule.start
      check: >-
        timestamp(spec.vars.action_schedule.stop) < timestamp(spec.vars.action_schedule.start).add('8h')
    openAPIV3Schema:
      type: object
      required:
      - spec
      additionalProperties: false
      properties:
        spec:
          type: object
          additionalProperties: false
          properties:
            vars:
              type: object
              properties:
                action_schedule:
                  type: object
                  additionalProperties: false
                  properties:
                    start:
                      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$
                      type: string
                    stop:
                      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$
                      type: string
{% endraw %}
